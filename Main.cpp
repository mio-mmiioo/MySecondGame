//インクルード
//#include "framework.h"
//#include "main.h"
#include <stdlib.h>
#include "Engine/Direct3D.h"
#include "Engine/Input.h"
#include "Engine/Camera.h"
#include "Engine/Transform.h"
#include "Engine/RootJob.h"

#pragma comment(lib, "winmm.lib")

#define MAX_LOADSTRING 100

//定数宣言
const char* WIN_CLASS_NAME = "SampleGame";  //ウィンドウクラス名
const int WINDOW_WIDTH = 800;  //ウィンドウの幅
const int WINDOW_HEIGHT = 600; //ウィンドウの高さB

RootJob* pRootJob = nullptr;

//プロトタイプ宣言
LRESULT CALLBACK WndProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam);

//エントリーポイント
int APIENTRY WinMain(HINSTANCE hInstance, HINSTANCE hPrevInst, LPSTR lpCmdLine, int nCmdShow)
{
	//ウィンドウクラス（設計図）を作成
	WNDCLASSEX wc;
	wc.cbSize = sizeof(WNDCLASSEX);             //この構造体のサイズ
	wc.hInstance = hInstance;                   //インスタンスハンドル
	wc.lpszClassName = WIN_CLASS_NAME;            //ウィンドウクラス名
	wc.lpfnWndProc = WndProc;                   //ウィンドウプロシージャ
	wc.style = CS_VREDRAW | CS_HREDRAW;         //スタイル（デフォルト）
	wc.hIcon = LoadIcon(NULL, IDI_APPLICATION); //アイコン
	wc.hIconSm = LoadIcon(NULL, IDI_WINLOGO);   //小さいアイコン
	wc.hCursor = LoadCursor(NULL, IDC_ARROW);   //マウスカーソル
	wc.lpszMenuName = NULL;                     //メニュー（なし）
	wc.cbClsExtra = 0;
	wc.cbWndExtra = 0;
	wc.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH); //背景（白）
	RegisterClassEx(&wc);  //クラスを登録
	
	//ウィンドウサイズの計算
	RECT winRect = { 0, 0, WINDOW_WIDTH, WINDOW_HEIGHT };
	AdjustWindowRect(&winRect, WS_OVERLAPPEDWINDOW, FALSE);
	int winW = winRect.right - winRect.left;     //ウィンドウ幅
	int winH = winRect.bottom - winRect.top;     //ウィンドウ高さ

	//ウィンドウを作成
	HWND hWnd = CreateWindow(
		WIN_CLASS_NAME,         //ウィンドウクラス名
		"サンプルゲーム",     //タイトルバーに表示する内容
		WS_OVERLAPPEDWINDOW, //スタイル（普通のウィンドウ）
		CW_USEDEFAULT,       //表示位置左（おまかせ）
		CW_USEDEFAULT,       //表示位置上（おまかせ）
		winW,                 //ウィンドウ幅
		winH,                 //ウィンドウ高さ
		NULL,                //親ウインドウ（なし）
		NULL,                //メニュー（なし）
		hInstance,           //インスタンス
		NULL                 //パラメータ（なし）
	);
	//ウィンドウを表示
	ShowWindow(hWnd, nCmdShow);

	//Direct3D初期化
	if (FAILED(Direct3D::Initialize(winW, winH, hWnd)))
	{
		return 0;
	}

	//DiewctInputの初期化
	Input::Initialize(hWnd);

	Camera::Initialize();

	pRootJob = new RootJob(nullptr);
	pRootJob->Initialize();

	//static Transform transform;

	float right = 0;
	float up = 0;
	//メッセージループ（何か起きるのを待つ）
	MSG msg;
	ZeroMemory(&msg, sizeof(msg));
	while (msg.message != WM_QUIT)
	{
		//メッセージあり
		if (PeekMessage(&msg, NULL, 0U, 0U, PM_REMOVE))
		{
			TranslateMessage(&msg);
			DispatchMessage(&msg);
		}
		//メッセージなし
		else
		{
			timeBeginPeriod(1);
			static DWORD countFps = 0; // FPS計測用カウンタ
			static DWORD startTime = timeGetTime(); // 初回の時間を保存
			DWORD nowTime = timeGetTime(); // 現在の時間を取得
			static DWORD lastUpdateTime = nowTime;
			timeEndPeriod(1);

			if (nowTime - startTime >= 1000)
			{
				char str[16];
				wsprintf(str, "%u", countFps);
				SetWindowText(hWnd, str);

				countFps = 0;
				startTime = nowTime;
			}

			if (nowTime - lastUpdateTime <= 1000.0f / 60)
			{
				continue;
			}
			lastUpdateTime = nowTime;

			countFps++;

			char str[16];
			wsprintf(str, "%u", countFps);

			//static long int cnt = 0;
			//string str = "Sample Game cnt:" + std::to_string(cnt++);
			SetWindowTextA(hWnd, str);

			//startTime = nowTime;

			//ゲームの処理
			Camera::Update();
			//入力情報の更新
			Input::Update();
			pRootJob->UpdateSub();

			if (Input::IsKeyDown(DIK_ESCAPE))
			{
				PostQuitMessage(0);
			}

			Direct3D::BeginDraw();

			// pRootJobから、すべてのオブジェクトの描画をする
			pRootJob->DrawSub();

			Direct3D::EndDraw();
		}
	}

	Input::Release();
	Direct3D::Release();

	return 0;
}

//ウィンドウプロシージャ（何かあった時によばれる関数）
LRESULT CALLBACK WndProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam)
{
	switch (msg)
	{
	case WM_MOUSEMOVE: // マウスが動いたメッセージ
		{
			int x = LOWORD(lParam);
			int y = HIWORD(lParam);
			Input::SetMousePosition(x, y);
			OutputDebugString((std::to_string(x) + "," + std::to_string(y) + "\n").c_str());
		}
		return 0;

	case WM_DESTROY:
		{
			PostQuitMessage(0);  //プログラム終了
		}
		return 0;
	}
	return DefWindowProc(hWnd, msg, wParam, lParam);
}
