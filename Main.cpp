//インクルード
//#include "framework.h"
//#include "main.h"
//#include <Windows.h>
#include "Direct3D.h"
#include "Input.h"
#include "Camera.h"
//#include "Dice.h"
//#include "Sprite.h"
#include "Transform.h"
#include "Fbx.h"

#define MAX_LOADSTRING 100

//定数宣言
const char* WIN_CLASS_NAME = "SampleGame";  //ウィンドウクラス名
const int WINDOW_WIDTH = 800;  //ウィンドウの幅
const int WINDOW_HEIGHT = 600; //ウィンドウの高さB

//プロトタイプ宣言
LRESULT CALLBACK WndProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam);

//エントリーポイント
int APIENTRY WinMain(HINSTANCE hInstance, HINSTANCE hPrevInst, LPSTR lpCmdLine, int nCmdShow)
{
	//ウィンドウクラス（設計図）を作成
	WNDCLASSEX wc;
	wc.cbSize = sizeof(WNDCLASSEX);             //この構造体のサイズ
	wc.hInstance = hInstance;                   //インスタンスハンドル
	wc.lpszClassName = WIN_CLASS_NAME;            //ウィンドウクラス名
	wc.lpfnWndProc = WndProc;                   //ウィンドウプロシージャ
	wc.style = CS_VREDRAW | CS_HREDRAW;         //スタイル（デフォルト）
	wc.hIcon = LoadIcon(NULL, IDI_APPLICATION); //アイコン
	wc.hIconSm = LoadIcon(NULL, IDI_WINLOGO);   //小さいアイコン
	wc.hCursor = LoadCursor(NULL, IDC_ARROW);   //マウスカーソル
	wc.lpszMenuName = NULL;                     //メニュー（なし）
	wc.cbClsExtra = 0;
	wc.cbWndExtra = 0;
	wc.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH); //背景（白）
	RegisterClassEx(&wc);  //クラスを登録
	
	//ウィンドウサイズの計算
	RECT winRect = { 0, 0, WINDOW_WIDTH, WINDOW_HEIGHT };
	AdjustWindowRect(&winRect, WS_OVERLAPPEDWINDOW, FALSE);
	int winW = winRect.right - winRect.left;     //ウィンドウ幅
	int winH = winRect.bottom - winRect.top;     //ウィンドウ高さ

	//ウィンドウを作成
	HWND hWnd = CreateWindow(
		WIN_CLASS_NAME,         //ウィンドウクラス名
		"サンプルゲーム",     //タイトルバーに表示する内容
		WS_OVERLAPPEDWINDOW, //スタイル（普通のウィンドウ）
		CW_USEDEFAULT,       //表示位置左（おまかせ）
		CW_USEDEFAULT,       //表示位置上（おまかせ）
		winW,                 //ウィンドウ幅
		winH,                 //ウィンドウ高さ
		NULL,                //親ウインドウ（なし）
		NULL,                //メニュー（なし）
		hInstance,           //インスタンス
		NULL                 //パラメータ（なし）
	);
	//ウィンドウを表示
	ShowWindow(hWnd, nCmdShow);

	//Direct3D初期化
	if (FAILED(Direct3D::Initialize(winW, winH, hWnd)))
	{
		return 0;
	}

	//DiewctInputの初期化
	Input::Initialize(hWnd);

	Camera::Initialize();

	//Dice* dice = new Dice();
	//Sprite* sprite = new Sprite();
	static Transform transform;
	Fbx* fbx = new Fbx();
	fbx->Load("oden.fbx");
	//if (FAILED(dice->Initialize()))
	//{
	//	return 0;
	//}
	//if (FAILED(sprite->Initialize()))
	//{
	//	return 0;
	//}

	float right = 0;
	float up = 0;
	//メッセージループ（何か起きるのを待つ）
	MSG msg;
	ZeroMemory(&msg, sizeof(msg));
	while (msg.message != WM_QUIT)
	{
		//メッセージあり
		if (PeekMessage(&msg, NULL, 0U, 0U, PM_REMOVE))
		{
			TranslateMessage(&msg);
			DispatchMessage(&msg);
		}
		//メッセージなし
		else
		{
			//ゲームの処理
			Camera::Update();
			//入力情報の更新
			Input::Update();

			if (Input::IsKeyDown(DIK_ESCAPE))
			{
				static int cnt = 0;
				cnt++;
				if (cnt >= 3)
				{
					PostQuitMessage(0);
				}
			}

			if (GetAsyncKeyState('A') & 0x8000)
			{
				right += 0.01f;
				if (right >= 360)
				{
					right = 0;
				}
			}
			if (GetAsyncKeyState('W') & 0x8000)
			{
				up += 0.01f;
				if (up >= 360)
				{
					up = 0;
				}
			}

			Direct3D::BeginDraw();

			//ここでtransform変える
			//transform.scale_.x = 0.5f;
			//transform.rotate_.y += 0.01f;
			//transform.rotate_.z += 0.01f;

			//XMMATRIX worldMatrix = transform.GetWorldMatrix();
			//sprite->Draw(worldMatrix);
			//dice->Draw(worldMatrix);

			//transform.position_.x = 1.0f;
			//transform.rotate_.y += 0.01f;
			//transform.Calculation();
			
			// XMMATRIX Mtrs = trans.GetWorldMatrix();
			//sprite->Draw(Mtrs);
			fbx->Draw(transform);

			//描画処理
			Direct3D::EndDraw();

		}
	}

	//SAFE_DELETE(dice);
	//SAFE_DELETE(sprite);
	SAFE_DELETE(fbx);
	Input::Release();
	Direct3D::Release();

	return 0;
}

//ウィンドウプロシージャ（何かあった時によばれる関数）
LRESULT CALLBACK WndProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam)
{
	switch (msg)
	{
	case WM_DESTROY:
		PostQuitMessage(0);  //プログラム終了
		return 0;
	}
	return DefWindowProc(hWnd, msg, wParam, lParam);
}
